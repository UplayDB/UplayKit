// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: settings.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Uplay.Settings {

  /// <summary>Holder for reflection information generated from settings.proto</summary>
  public static partial class SettingsReflection {

    #region Descriptor
    /// <summary>File descriptor for settings.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SettingsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chp1cGNfZHVtcF8xMC9zZXR0aW5ncy5wcm90bxIUbWcucHJvdG9jb2wuc2V0",
            "dGluZ3MaFWNvbW1vbl9zZXR0aW5ncy5wcm90byK4BQoNTm90aWZpY2F0aW9u",
            "cxIbCg1pbkdhbWVFbmFibGVkGAEgASgIOgR0cnVlEiQKFnBlcm1hbmVudElu",
            "R2FtZUVuYWJsZWQYAiABKAg6BHRydWUSJwoZaW5HYW1lRnJpZW5kT25saW5l",
            "RW5hYmxlZBgDIAEoCDoEdHJ1ZRIcCg5zeXNUcmF5RW5hYmxlZBgEIAEoCDoE",
            "dHJ1ZRIpChtkZXNrdG9wRnJpZW5kUmVxdWVzdEVuYWJsZWQYBSABKAg6BHRy",
            "dWUSKAoaZGVza3RvcEZyaWVuZE9ubGluZUVuYWJsZWQYBiABKAg6BHRydWUS",
            "IAoSZGVza3RvcENoYXRFbmFibGVkGAcgASgIOgR0cnVlEiYKGGRlc2t0b3BG",
            "cmllbmRHYW1lRW5hYmxlZBgIIAEoCDoEdHJ1ZRImChhkZXNrdG9wR2FtZUlu",
            "dml0ZUVuYWJsZWQYCSABKAg6BHRydWUSJwoZZGVza3RvcFBhcnR5SW52aXRl",
            "RW5hYmxlZBgKIAEoCDoEdHJ1ZRIsCh5kZXNrdG9wRG93bmxvYWRDb21wbGV0",
            "ZUVuYWJsZWQYCyABKAg6BHRydWUSLgogZGVza3RvcEdhbWVQYXRjaEF2YWls",
            "YWJsZUVuYWJsZWQYDCABKAg6BHRydWUSKQobZGVza3RvcFBsYXlBdmFpbGFi",
            "bGVFbmFibGVkGA0gASgIOgR0cnVlEicKGWRlc2t0b3BHcm91cEludml0ZUVu",
            "YWJsZWQYDiABKAg6BHRydWUSJwoZZGVza3RvcFNjcmVlbnNob3RzRW5hYmxl",
            "ZBgPIAEoCDoEdHJ1ZRIoChpkZXNrdG9wQWNoaWV2ZW1lbnRzRW5hYmxlZBgQ",
            "IAEoCDoEdHJ1ZRIoChlkZXNrdG9wQ2x1YkFjdGlvbnNFbmFibGVkGBEgASgI",
            "OgVmYWxzZSL7CAoNU2V0dGluZ3NNb2RlbBIoCgR1c2VyGAEgASgLMhoubWcu",
            "cHJvdG9jb2wuc2V0dGluZ3MuVXNlchIuCgdvdmVybGF5GAIgASgLMh0ubWcu",
            "cHJvdG9jb2wuc2V0dGluZ3MuT3ZlcmxheRIwCghsYW5ndWFnZRgDIAEoCzIe",
            "Lm1nLnByb3RvY29sLnNldHRpbmdzLkxhbmd1YWdlEigKBG1pc2MYBCABKAsy",
            "Gi5tZy5wcm90b2NvbC5zZXR0aW5ncy5NaXNjEjAKCHBvc2l0aW9uGAUgASgL",
            "Mh4ubWcucHJvdG9jb2wuc2V0dGluZ3MuUG9zaXRpb24SOgoNbm90aWZpY2F0",
            "aW9ucxgGIAEoCzIjLm1nLnByb3RvY29sLnNldHRpbmdzLk5vdGlmaWNhdGlv",
            "bnMSLgoHbWFzdGVycxgHIAEoCzIdLm1nLnByb3RvY29sLnNldHRpbmdzLk1h",
            "c3RlcnMSOwoVaG90a2V5c19vdmVybGF5VG9nZ2xlGAkgASgLMhwubWcucHJv",
            "dG9jb2wuc2V0dGluZ3MuSG90a2V5EjkKE2hvdGtleXNfb3ZlcmxheUhpZGUY",
            "CiABKAsyHC5tZy5wcm90b2NvbC5zZXR0aW5ncy5Ib3RrZXkSPwoZaG90a2V5",
            "c19jYXB0dXJlU2NyZWVuc2hvdBgLIAEoCzIcLm1nLnByb3RvY29sLnNldHRp",
            "bmdzLkhvdGtleRIyCglkb3dubG9hZHMYDCABKAsyHy5tZy5wcm90b2NvbC5z",
            "ZXR0aW5ncy5Eb3dubG9hZHMSKgoFYmV0YXMYDSABKAsyGy5tZy5wcm90b2Nv",
            "bC5zZXR0aW5ncy5CZXRhcxI4CgxhdXRvUGF0Y2hpbmcYDiABKAsyIi5tZy5w",
            "cm90b2NvbC5zZXR0aW5ncy5BdXRvUGF0Y2hpbmcSMgoJc3BvdGxpZ2h0GA8g",
            "ASgLMh8ubWcucHJvdG9jb2wuc2V0dGluZ3MuU3BvdGxpZ2h0EkMKEm1vZGVs",
            "ZXNzX3Bvc2l0aW9ucxgQIAEoCzInLm1nLnByb3RvY29sLnNldHRpbmdzLk1v",
            "ZGVsZXNzUG9zaXRpb25zEjoKDWNvbnZlcnNhdGlvbnMYESABKAsyIy5tZy5w",
            "cm90b2NvbC5zZXR0aW5ncy5Db252ZXJzYXRpb25zEigKBGVwaWMYEiABKAsy",
            "Gi5tZy5wcm90b2NvbC5zZXR0aW5ncy5FcGljEkEKEWJyYW5kZWRfaW5zdGFs",
            "bGVyGBMgASgLMiYubWcucHJvdG9jb2wuc2V0dGluZ3MuQnJhbmRlZEluc3Rh",
            "bGxlchIyCglzaGFyZVBsYXkYFCABKAsyHy5tZy5wcm90b2NvbC5zZXR0aW5n",
            "cy5TaGFyZVBsYXkSNwoMY29ubmVjdF92aWV3GBUgASgLMiEubWcucHJvdG9j",
            "b2wuc2V0dGluZ3MuQ29ubmVjdFZpZXcSNAoKcmVtb3RlUGxheRgWIAEoCzIg",
            "Lm1nLnByb3RvY29sLnNldHRpbmdzLlJlbW90ZVBsYXk="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Uplay.Settings.CommonSettingsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.Settings.Notifications), global::Uplay.Settings.Notifications.Parser, new[]{ "InGameEnabled", "PermanentInGameEnabled", "InGameFriendOnlineEnabled", "SysTrayEnabled", "DesktopFriendRequestEnabled", "DesktopFriendOnlineEnabled", "DesktopChatEnabled", "DesktopFriendGameEnabled", "DesktopGameInviteEnabled", "DesktopPartyInviteEnabled", "DesktopDownloadCompleteEnabled", "DesktopGamePatchAvailableEnabled", "DesktopPlayAvailableEnabled", "DesktopGroupInviteEnabled", "DesktopScreenshotsEnabled", "DesktopAchievementsEnabled", "DesktopClubActionsEnabled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.Settings.SettingsModel), global::Uplay.Settings.SettingsModel.Parser, new[]{ "User", "Overlay", "Language", "Misc", "Position", "Notifications", "Masters", "HotkeysOverlayToggle", "HotkeysOverlayHide", "HotkeysCaptureScreenshot", "Downloads", "Betas", "AutoPatching", "Spotlight", "ModelessPositions", "Conversations", "Epic", "BrandedInstaller", "SharePlay", "ConnectView", "RemotePlay" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Notifications : pb::IMessage<Notifications>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Notifications> _parser = new pb::MessageParser<Notifications>(() => new Notifications());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Notifications> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.Settings.SettingsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Notifications() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Notifications(Notifications other) : this() {
      _hasBits0 = other._hasBits0;
      inGameEnabled_ = other.inGameEnabled_;
      permanentInGameEnabled_ = other.permanentInGameEnabled_;
      inGameFriendOnlineEnabled_ = other.inGameFriendOnlineEnabled_;
      sysTrayEnabled_ = other.sysTrayEnabled_;
      desktopFriendRequestEnabled_ = other.desktopFriendRequestEnabled_;
      desktopFriendOnlineEnabled_ = other.desktopFriendOnlineEnabled_;
      desktopChatEnabled_ = other.desktopChatEnabled_;
      desktopFriendGameEnabled_ = other.desktopFriendGameEnabled_;
      desktopGameInviteEnabled_ = other.desktopGameInviteEnabled_;
      desktopPartyInviteEnabled_ = other.desktopPartyInviteEnabled_;
      desktopDownloadCompleteEnabled_ = other.desktopDownloadCompleteEnabled_;
      desktopGamePatchAvailableEnabled_ = other.desktopGamePatchAvailableEnabled_;
      desktopPlayAvailableEnabled_ = other.desktopPlayAvailableEnabled_;
      desktopGroupInviteEnabled_ = other.desktopGroupInviteEnabled_;
      desktopScreenshotsEnabled_ = other.desktopScreenshotsEnabled_;
      desktopAchievementsEnabled_ = other.desktopAchievementsEnabled_;
      desktopClubActionsEnabled_ = other.desktopClubActionsEnabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Notifications Clone() {
      return new Notifications(this);
    }

    /// <summary>Field number for the "inGameEnabled" field.</summary>
    public const int InGameEnabledFieldNumber = 1;
    private readonly static bool InGameEnabledDefaultValue = true;

    private bool inGameEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool InGameEnabled {
      get { if ((_hasBits0 & 1) != 0) { return inGameEnabled_; } else { return InGameEnabledDefaultValue; } }
      set {
        _hasBits0 |= 1;
        inGameEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "inGameEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInGameEnabled {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "inGameEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInGameEnabled() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "permanentInGameEnabled" field.</summary>
    public const int PermanentInGameEnabledFieldNumber = 2;
    private readonly static bool PermanentInGameEnabledDefaultValue = true;

    private bool permanentInGameEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PermanentInGameEnabled {
      get { if ((_hasBits0 & 2) != 0) { return permanentInGameEnabled_; } else { return PermanentInGameEnabledDefaultValue; } }
      set {
        _hasBits0 |= 2;
        permanentInGameEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "permanentInGameEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPermanentInGameEnabled {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "permanentInGameEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPermanentInGameEnabled() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "inGameFriendOnlineEnabled" field.</summary>
    public const int InGameFriendOnlineEnabledFieldNumber = 3;
    private readonly static bool InGameFriendOnlineEnabledDefaultValue = true;

    private bool inGameFriendOnlineEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool InGameFriendOnlineEnabled {
      get { if ((_hasBits0 & 4) != 0) { return inGameFriendOnlineEnabled_; } else { return InGameFriendOnlineEnabledDefaultValue; } }
      set {
        _hasBits0 |= 4;
        inGameFriendOnlineEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "inGameFriendOnlineEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInGameFriendOnlineEnabled {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "inGameFriendOnlineEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInGameFriendOnlineEnabled() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "sysTrayEnabled" field.</summary>
    public const int SysTrayEnabledFieldNumber = 4;
    private readonly static bool SysTrayEnabledDefaultValue = true;

    private bool sysTrayEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SysTrayEnabled {
      get { if ((_hasBits0 & 8) != 0) { return sysTrayEnabled_; } else { return SysTrayEnabledDefaultValue; } }
      set {
        _hasBits0 |= 8;
        sysTrayEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "sysTrayEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSysTrayEnabled {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "sysTrayEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSysTrayEnabled() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "desktopFriendRequestEnabled" field.</summary>
    public const int DesktopFriendRequestEnabledFieldNumber = 5;
    private readonly static bool DesktopFriendRequestEnabledDefaultValue = true;

    private bool desktopFriendRequestEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DesktopFriendRequestEnabled {
      get { if ((_hasBits0 & 16) != 0) { return desktopFriendRequestEnabled_; } else { return DesktopFriendRequestEnabledDefaultValue; } }
      set {
        _hasBits0 |= 16;
        desktopFriendRequestEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "desktopFriendRequestEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesktopFriendRequestEnabled {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "desktopFriendRequestEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesktopFriendRequestEnabled() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "desktopFriendOnlineEnabled" field.</summary>
    public const int DesktopFriendOnlineEnabledFieldNumber = 6;
    private readonly static bool DesktopFriendOnlineEnabledDefaultValue = true;

    private bool desktopFriendOnlineEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DesktopFriendOnlineEnabled {
      get { if ((_hasBits0 & 32) != 0) { return desktopFriendOnlineEnabled_; } else { return DesktopFriendOnlineEnabledDefaultValue; } }
      set {
        _hasBits0 |= 32;
        desktopFriendOnlineEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "desktopFriendOnlineEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesktopFriendOnlineEnabled {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "desktopFriendOnlineEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesktopFriendOnlineEnabled() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "desktopChatEnabled" field.</summary>
    public const int DesktopChatEnabledFieldNumber = 7;
    private readonly static bool DesktopChatEnabledDefaultValue = true;

    private bool desktopChatEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DesktopChatEnabled {
      get { if ((_hasBits0 & 64) != 0) { return desktopChatEnabled_; } else { return DesktopChatEnabledDefaultValue; } }
      set {
        _hasBits0 |= 64;
        desktopChatEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "desktopChatEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesktopChatEnabled {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "desktopChatEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesktopChatEnabled() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "desktopFriendGameEnabled" field.</summary>
    public const int DesktopFriendGameEnabledFieldNumber = 8;
    private readonly static bool DesktopFriendGameEnabledDefaultValue = true;

    private bool desktopFriendGameEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DesktopFriendGameEnabled {
      get { if ((_hasBits0 & 128) != 0) { return desktopFriendGameEnabled_; } else { return DesktopFriendGameEnabledDefaultValue; } }
      set {
        _hasBits0 |= 128;
        desktopFriendGameEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "desktopFriendGameEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesktopFriendGameEnabled {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "desktopFriendGameEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesktopFriendGameEnabled() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "desktopGameInviteEnabled" field.</summary>
    public const int DesktopGameInviteEnabledFieldNumber = 9;
    private readonly static bool DesktopGameInviteEnabledDefaultValue = true;

    private bool desktopGameInviteEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DesktopGameInviteEnabled {
      get { if ((_hasBits0 & 256) != 0) { return desktopGameInviteEnabled_; } else { return DesktopGameInviteEnabledDefaultValue; } }
      set {
        _hasBits0 |= 256;
        desktopGameInviteEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "desktopGameInviteEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesktopGameInviteEnabled {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "desktopGameInviteEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesktopGameInviteEnabled() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "desktopPartyInviteEnabled" field.</summary>
    public const int DesktopPartyInviteEnabledFieldNumber = 10;
    private readonly static bool DesktopPartyInviteEnabledDefaultValue = true;

    private bool desktopPartyInviteEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DesktopPartyInviteEnabled {
      get { if ((_hasBits0 & 512) != 0) { return desktopPartyInviteEnabled_; } else { return DesktopPartyInviteEnabledDefaultValue; } }
      set {
        _hasBits0 |= 512;
        desktopPartyInviteEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "desktopPartyInviteEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesktopPartyInviteEnabled {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "desktopPartyInviteEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesktopPartyInviteEnabled() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "desktopDownloadCompleteEnabled" field.</summary>
    public const int DesktopDownloadCompleteEnabledFieldNumber = 11;
    private readonly static bool DesktopDownloadCompleteEnabledDefaultValue = true;

    private bool desktopDownloadCompleteEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DesktopDownloadCompleteEnabled {
      get { if ((_hasBits0 & 1024) != 0) { return desktopDownloadCompleteEnabled_; } else { return DesktopDownloadCompleteEnabledDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        desktopDownloadCompleteEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "desktopDownloadCompleteEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesktopDownloadCompleteEnabled {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "desktopDownloadCompleteEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesktopDownloadCompleteEnabled() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "desktopGamePatchAvailableEnabled" field.</summary>
    public const int DesktopGamePatchAvailableEnabledFieldNumber = 12;
    private readonly static bool DesktopGamePatchAvailableEnabledDefaultValue = true;

    private bool desktopGamePatchAvailableEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DesktopGamePatchAvailableEnabled {
      get { if ((_hasBits0 & 2048) != 0) { return desktopGamePatchAvailableEnabled_; } else { return DesktopGamePatchAvailableEnabledDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        desktopGamePatchAvailableEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "desktopGamePatchAvailableEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesktopGamePatchAvailableEnabled {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "desktopGamePatchAvailableEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesktopGamePatchAvailableEnabled() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "desktopPlayAvailableEnabled" field.</summary>
    public const int DesktopPlayAvailableEnabledFieldNumber = 13;
    private readonly static bool DesktopPlayAvailableEnabledDefaultValue = true;

    private bool desktopPlayAvailableEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DesktopPlayAvailableEnabled {
      get { if ((_hasBits0 & 4096) != 0) { return desktopPlayAvailableEnabled_; } else { return DesktopPlayAvailableEnabledDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        desktopPlayAvailableEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "desktopPlayAvailableEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesktopPlayAvailableEnabled {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "desktopPlayAvailableEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesktopPlayAvailableEnabled() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "desktopGroupInviteEnabled" field.</summary>
    public const int DesktopGroupInviteEnabledFieldNumber = 14;
    private readonly static bool DesktopGroupInviteEnabledDefaultValue = true;

    private bool desktopGroupInviteEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DesktopGroupInviteEnabled {
      get { if ((_hasBits0 & 8192) != 0) { return desktopGroupInviteEnabled_; } else { return DesktopGroupInviteEnabledDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        desktopGroupInviteEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "desktopGroupInviteEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesktopGroupInviteEnabled {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "desktopGroupInviteEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesktopGroupInviteEnabled() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "desktopScreenshotsEnabled" field.</summary>
    public const int DesktopScreenshotsEnabledFieldNumber = 15;
    private readonly static bool DesktopScreenshotsEnabledDefaultValue = true;

    private bool desktopScreenshotsEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DesktopScreenshotsEnabled {
      get { if ((_hasBits0 & 16384) != 0) { return desktopScreenshotsEnabled_; } else { return DesktopScreenshotsEnabledDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        desktopScreenshotsEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "desktopScreenshotsEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesktopScreenshotsEnabled {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "desktopScreenshotsEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesktopScreenshotsEnabled() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "desktopAchievementsEnabled" field.</summary>
    public const int DesktopAchievementsEnabledFieldNumber = 16;
    private readonly static bool DesktopAchievementsEnabledDefaultValue = true;

    private bool desktopAchievementsEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DesktopAchievementsEnabled {
      get { if ((_hasBits0 & 32768) != 0) { return desktopAchievementsEnabled_; } else { return DesktopAchievementsEnabledDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        desktopAchievementsEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "desktopAchievementsEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesktopAchievementsEnabled {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "desktopAchievementsEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesktopAchievementsEnabled() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "desktopClubActionsEnabled" field.</summary>
    public const int DesktopClubActionsEnabledFieldNumber = 17;
    private readonly static bool DesktopClubActionsEnabledDefaultValue = false;

    private bool desktopClubActionsEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DesktopClubActionsEnabled {
      get { if ((_hasBits0 & 65536) != 0) { return desktopClubActionsEnabled_; } else { return DesktopClubActionsEnabledDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        desktopClubActionsEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "desktopClubActionsEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDesktopClubActionsEnabled {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "desktopClubActionsEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDesktopClubActionsEnabled() {
      _hasBits0 &= ~65536;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Notifications);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Notifications other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InGameEnabled != other.InGameEnabled) return false;
      if (PermanentInGameEnabled != other.PermanentInGameEnabled) return false;
      if (InGameFriendOnlineEnabled != other.InGameFriendOnlineEnabled) return false;
      if (SysTrayEnabled != other.SysTrayEnabled) return false;
      if (DesktopFriendRequestEnabled != other.DesktopFriendRequestEnabled) return false;
      if (DesktopFriendOnlineEnabled != other.DesktopFriendOnlineEnabled) return false;
      if (DesktopChatEnabled != other.DesktopChatEnabled) return false;
      if (DesktopFriendGameEnabled != other.DesktopFriendGameEnabled) return false;
      if (DesktopGameInviteEnabled != other.DesktopGameInviteEnabled) return false;
      if (DesktopPartyInviteEnabled != other.DesktopPartyInviteEnabled) return false;
      if (DesktopDownloadCompleteEnabled != other.DesktopDownloadCompleteEnabled) return false;
      if (DesktopGamePatchAvailableEnabled != other.DesktopGamePatchAvailableEnabled) return false;
      if (DesktopPlayAvailableEnabled != other.DesktopPlayAvailableEnabled) return false;
      if (DesktopGroupInviteEnabled != other.DesktopGroupInviteEnabled) return false;
      if (DesktopScreenshotsEnabled != other.DesktopScreenshotsEnabled) return false;
      if (DesktopAchievementsEnabled != other.DesktopAchievementsEnabled) return false;
      if (DesktopClubActionsEnabled != other.DesktopClubActionsEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasInGameEnabled) hash ^= InGameEnabled.GetHashCode();
      if (HasPermanentInGameEnabled) hash ^= PermanentInGameEnabled.GetHashCode();
      if (HasInGameFriendOnlineEnabled) hash ^= InGameFriendOnlineEnabled.GetHashCode();
      if (HasSysTrayEnabled) hash ^= SysTrayEnabled.GetHashCode();
      if (HasDesktopFriendRequestEnabled) hash ^= DesktopFriendRequestEnabled.GetHashCode();
      if (HasDesktopFriendOnlineEnabled) hash ^= DesktopFriendOnlineEnabled.GetHashCode();
      if (HasDesktopChatEnabled) hash ^= DesktopChatEnabled.GetHashCode();
      if (HasDesktopFriendGameEnabled) hash ^= DesktopFriendGameEnabled.GetHashCode();
      if (HasDesktopGameInviteEnabled) hash ^= DesktopGameInviteEnabled.GetHashCode();
      if (HasDesktopPartyInviteEnabled) hash ^= DesktopPartyInviteEnabled.GetHashCode();
      if (HasDesktopDownloadCompleteEnabled) hash ^= DesktopDownloadCompleteEnabled.GetHashCode();
      if (HasDesktopGamePatchAvailableEnabled) hash ^= DesktopGamePatchAvailableEnabled.GetHashCode();
      if (HasDesktopPlayAvailableEnabled) hash ^= DesktopPlayAvailableEnabled.GetHashCode();
      if (HasDesktopGroupInviteEnabled) hash ^= DesktopGroupInviteEnabled.GetHashCode();
      if (HasDesktopScreenshotsEnabled) hash ^= DesktopScreenshotsEnabled.GetHashCode();
      if (HasDesktopAchievementsEnabled) hash ^= DesktopAchievementsEnabled.GetHashCode();
      if (HasDesktopClubActionsEnabled) hash ^= DesktopClubActionsEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasInGameEnabled) {
        output.WriteRawTag(8);
        output.WriteBool(InGameEnabled);
      }
      if (HasPermanentInGameEnabled) {
        output.WriteRawTag(16);
        output.WriteBool(PermanentInGameEnabled);
      }
      if (HasInGameFriendOnlineEnabled) {
        output.WriteRawTag(24);
        output.WriteBool(InGameFriendOnlineEnabled);
      }
      if (HasSysTrayEnabled) {
        output.WriteRawTag(32);
        output.WriteBool(SysTrayEnabled);
      }
      if (HasDesktopFriendRequestEnabled) {
        output.WriteRawTag(40);
        output.WriteBool(DesktopFriendRequestEnabled);
      }
      if (HasDesktopFriendOnlineEnabled) {
        output.WriteRawTag(48);
        output.WriteBool(DesktopFriendOnlineEnabled);
      }
      if (HasDesktopChatEnabled) {
        output.WriteRawTag(56);
        output.WriteBool(DesktopChatEnabled);
      }
      if (HasDesktopFriendGameEnabled) {
        output.WriteRawTag(64);
        output.WriteBool(DesktopFriendGameEnabled);
      }
      if (HasDesktopGameInviteEnabled) {
        output.WriteRawTag(72);
        output.WriteBool(DesktopGameInviteEnabled);
      }
      if (HasDesktopPartyInviteEnabled) {
        output.WriteRawTag(80);
        output.WriteBool(DesktopPartyInviteEnabled);
      }
      if (HasDesktopDownloadCompleteEnabled) {
        output.WriteRawTag(88);
        output.WriteBool(DesktopDownloadCompleteEnabled);
      }
      if (HasDesktopGamePatchAvailableEnabled) {
        output.WriteRawTag(96);
        output.WriteBool(DesktopGamePatchAvailableEnabled);
      }
      if (HasDesktopPlayAvailableEnabled) {
        output.WriteRawTag(104);
        output.WriteBool(DesktopPlayAvailableEnabled);
      }
      if (HasDesktopGroupInviteEnabled) {
        output.WriteRawTag(112);
        output.WriteBool(DesktopGroupInviteEnabled);
      }
      if (HasDesktopScreenshotsEnabled) {
        output.WriteRawTag(120);
        output.WriteBool(DesktopScreenshotsEnabled);
      }
      if (HasDesktopAchievementsEnabled) {
        output.WriteRawTag(128, 1);
        output.WriteBool(DesktopAchievementsEnabled);
      }
      if (HasDesktopClubActionsEnabled) {
        output.WriteRawTag(136, 1);
        output.WriteBool(DesktopClubActionsEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasInGameEnabled) {
        output.WriteRawTag(8);
        output.WriteBool(InGameEnabled);
      }
      if (HasPermanentInGameEnabled) {
        output.WriteRawTag(16);
        output.WriteBool(PermanentInGameEnabled);
      }
      if (HasInGameFriendOnlineEnabled) {
        output.WriteRawTag(24);
        output.WriteBool(InGameFriendOnlineEnabled);
      }
      if (HasSysTrayEnabled) {
        output.WriteRawTag(32);
        output.WriteBool(SysTrayEnabled);
      }
      if (HasDesktopFriendRequestEnabled) {
        output.WriteRawTag(40);
        output.WriteBool(DesktopFriendRequestEnabled);
      }
      if (HasDesktopFriendOnlineEnabled) {
        output.WriteRawTag(48);
        output.WriteBool(DesktopFriendOnlineEnabled);
      }
      if (HasDesktopChatEnabled) {
        output.WriteRawTag(56);
        output.WriteBool(DesktopChatEnabled);
      }
      if (HasDesktopFriendGameEnabled) {
        output.WriteRawTag(64);
        output.WriteBool(DesktopFriendGameEnabled);
      }
      if (HasDesktopGameInviteEnabled) {
        output.WriteRawTag(72);
        output.WriteBool(DesktopGameInviteEnabled);
      }
      if (HasDesktopPartyInviteEnabled) {
        output.WriteRawTag(80);
        output.WriteBool(DesktopPartyInviteEnabled);
      }
      if (HasDesktopDownloadCompleteEnabled) {
        output.WriteRawTag(88);
        output.WriteBool(DesktopDownloadCompleteEnabled);
      }
      if (HasDesktopGamePatchAvailableEnabled) {
        output.WriteRawTag(96);
        output.WriteBool(DesktopGamePatchAvailableEnabled);
      }
      if (HasDesktopPlayAvailableEnabled) {
        output.WriteRawTag(104);
        output.WriteBool(DesktopPlayAvailableEnabled);
      }
      if (HasDesktopGroupInviteEnabled) {
        output.WriteRawTag(112);
        output.WriteBool(DesktopGroupInviteEnabled);
      }
      if (HasDesktopScreenshotsEnabled) {
        output.WriteRawTag(120);
        output.WriteBool(DesktopScreenshotsEnabled);
      }
      if (HasDesktopAchievementsEnabled) {
        output.WriteRawTag(128, 1);
        output.WriteBool(DesktopAchievementsEnabled);
      }
      if (HasDesktopClubActionsEnabled) {
        output.WriteRawTag(136, 1);
        output.WriteBool(DesktopClubActionsEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasInGameEnabled) {
        size += 1 + 1;
      }
      if (HasPermanentInGameEnabled) {
        size += 1 + 1;
      }
      if (HasInGameFriendOnlineEnabled) {
        size += 1 + 1;
      }
      if (HasSysTrayEnabled) {
        size += 1 + 1;
      }
      if (HasDesktopFriendRequestEnabled) {
        size += 1 + 1;
      }
      if (HasDesktopFriendOnlineEnabled) {
        size += 1 + 1;
      }
      if (HasDesktopChatEnabled) {
        size += 1 + 1;
      }
      if (HasDesktopFriendGameEnabled) {
        size += 1 + 1;
      }
      if (HasDesktopGameInviteEnabled) {
        size += 1 + 1;
      }
      if (HasDesktopPartyInviteEnabled) {
        size += 1 + 1;
      }
      if (HasDesktopDownloadCompleteEnabled) {
        size += 1 + 1;
      }
      if (HasDesktopGamePatchAvailableEnabled) {
        size += 1 + 1;
      }
      if (HasDesktopPlayAvailableEnabled) {
        size += 1 + 1;
      }
      if (HasDesktopGroupInviteEnabled) {
        size += 1 + 1;
      }
      if (HasDesktopScreenshotsEnabled) {
        size += 1 + 1;
      }
      if (HasDesktopAchievementsEnabled) {
        size += 2 + 1;
      }
      if (HasDesktopClubActionsEnabled) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Notifications other) {
      if (other == null) {
        return;
      }
      if (other.HasInGameEnabled) {
        InGameEnabled = other.InGameEnabled;
      }
      if (other.HasPermanentInGameEnabled) {
        PermanentInGameEnabled = other.PermanentInGameEnabled;
      }
      if (other.HasInGameFriendOnlineEnabled) {
        InGameFriendOnlineEnabled = other.InGameFriendOnlineEnabled;
      }
      if (other.HasSysTrayEnabled) {
        SysTrayEnabled = other.SysTrayEnabled;
      }
      if (other.HasDesktopFriendRequestEnabled) {
        DesktopFriendRequestEnabled = other.DesktopFriendRequestEnabled;
      }
      if (other.HasDesktopFriendOnlineEnabled) {
        DesktopFriendOnlineEnabled = other.DesktopFriendOnlineEnabled;
      }
      if (other.HasDesktopChatEnabled) {
        DesktopChatEnabled = other.DesktopChatEnabled;
      }
      if (other.HasDesktopFriendGameEnabled) {
        DesktopFriendGameEnabled = other.DesktopFriendGameEnabled;
      }
      if (other.HasDesktopGameInviteEnabled) {
        DesktopGameInviteEnabled = other.DesktopGameInviteEnabled;
      }
      if (other.HasDesktopPartyInviteEnabled) {
        DesktopPartyInviteEnabled = other.DesktopPartyInviteEnabled;
      }
      if (other.HasDesktopDownloadCompleteEnabled) {
        DesktopDownloadCompleteEnabled = other.DesktopDownloadCompleteEnabled;
      }
      if (other.HasDesktopGamePatchAvailableEnabled) {
        DesktopGamePatchAvailableEnabled = other.DesktopGamePatchAvailableEnabled;
      }
      if (other.HasDesktopPlayAvailableEnabled) {
        DesktopPlayAvailableEnabled = other.DesktopPlayAvailableEnabled;
      }
      if (other.HasDesktopGroupInviteEnabled) {
        DesktopGroupInviteEnabled = other.DesktopGroupInviteEnabled;
      }
      if (other.HasDesktopScreenshotsEnabled) {
        DesktopScreenshotsEnabled = other.DesktopScreenshotsEnabled;
      }
      if (other.HasDesktopAchievementsEnabled) {
        DesktopAchievementsEnabled = other.DesktopAchievementsEnabled;
      }
      if (other.HasDesktopClubActionsEnabled) {
        DesktopClubActionsEnabled = other.DesktopClubActionsEnabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InGameEnabled = input.ReadBool();
            break;
          }
          case 16: {
            PermanentInGameEnabled = input.ReadBool();
            break;
          }
          case 24: {
            InGameFriendOnlineEnabled = input.ReadBool();
            break;
          }
          case 32: {
            SysTrayEnabled = input.ReadBool();
            break;
          }
          case 40: {
            DesktopFriendRequestEnabled = input.ReadBool();
            break;
          }
          case 48: {
            DesktopFriendOnlineEnabled = input.ReadBool();
            break;
          }
          case 56: {
            DesktopChatEnabled = input.ReadBool();
            break;
          }
          case 64: {
            DesktopFriendGameEnabled = input.ReadBool();
            break;
          }
          case 72: {
            DesktopGameInviteEnabled = input.ReadBool();
            break;
          }
          case 80: {
            DesktopPartyInviteEnabled = input.ReadBool();
            break;
          }
          case 88: {
            DesktopDownloadCompleteEnabled = input.ReadBool();
            break;
          }
          case 96: {
            DesktopGamePatchAvailableEnabled = input.ReadBool();
            break;
          }
          case 104: {
            DesktopPlayAvailableEnabled = input.ReadBool();
            break;
          }
          case 112: {
            DesktopGroupInviteEnabled = input.ReadBool();
            break;
          }
          case 120: {
            DesktopScreenshotsEnabled = input.ReadBool();
            break;
          }
          case 128: {
            DesktopAchievementsEnabled = input.ReadBool();
            break;
          }
          case 136: {
            DesktopClubActionsEnabled = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InGameEnabled = input.ReadBool();
            break;
          }
          case 16: {
            PermanentInGameEnabled = input.ReadBool();
            break;
          }
          case 24: {
            InGameFriendOnlineEnabled = input.ReadBool();
            break;
          }
          case 32: {
            SysTrayEnabled = input.ReadBool();
            break;
          }
          case 40: {
            DesktopFriendRequestEnabled = input.ReadBool();
            break;
          }
          case 48: {
            DesktopFriendOnlineEnabled = input.ReadBool();
            break;
          }
          case 56: {
            DesktopChatEnabled = input.ReadBool();
            break;
          }
          case 64: {
            DesktopFriendGameEnabled = input.ReadBool();
            break;
          }
          case 72: {
            DesktopGameInviteEnabled = input.ReadBool();
            break;
          }
          case 80: {
            DesktopPartyInviteEnabled = input.ReadBool();
            break;
          }
          case 88: {
            DesktopDownloadCompleteEnabled = input.ReadBool();
            break;
          }
          case 96: {
            DesktopGamePatchAvailableEnabled = input.ReadBool();
            break;
          }
          case 104: {
            DesktopPlayAvailableEnabled = input.ReadBool();
            break;
          }
          case 112: {
            DesktopGroupInviteEnabled = input.ReadBool();
            break;
          }
          case 120: {
            DesktopScreenshotsEnabled = input.ReadBool();
            break;
          }
          case 128: {
            DesktopAchievementsEnabled = input.ReadBool();
            break;
          }
          case 136: {
            DesktopClubActionsEnabled = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SettingsModel : pb::IMessage<SettingsModel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SettingsModel> _parser = new pb::MessageParser<SettingsModel>(() => new SettingsModel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SettingsModel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.Settings.SettingsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SettingsModel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SettingsModel(SettingsModel other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      overlay_ = other.overlay_ != null ? other.overlay_.Clone() : null;
      language_ = other.language_ != null ? other.language_.Clone() : null;
      misc_ = other.misc_ != null ? other.misc_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      notifications_ = other.notifications_ != null ? other.notifications_.Clone() : null;
      masters_ = other.masters_ != null ? other.masters_.Clone() : null;
      hotkeysOverlayToggle_ = other.hotkeysOverlayToggle_ != null ? other.hotkeysOverlayToggle_.Clone() : null;
      hotkeysOverlayHide_ = other.hotkeysOverlayHide_ != null ? other.hotkeysOverlayHide_.Clone() : null;
      hotkeysCaptureScreenshot_ = other.hotkeysCaptureScreenshot_ != null ? other.hotkeysCaptureScreenshot_.Clone() : null;
      downloads_ = other.downloads_ != null ? other.downloads_.Clone() : null;
      betas_ = other.betas_ != null ? other.betas_.Clone() : null;
      autoPatching_ = other.autoPatching_ != null ? other.autoPatching_.Clone() : null;
      spotlight_ = other.spotlight_ != null ? other.spotlight_.Clone() : null;
      modelessPositions_ = other.modelessPositions_ != null ? other.modelessPositions_.Clone() : null;
      conversations_ = other.conversations_ != null ? other.conversations_.Clone() : null;
      epic_ = other.epic_ != null ? other.epic_.Clone() : null;
      brandedInstaller_ = other.brandedInstaller_ != null ? other.brandedInstaller_.Clone() : null;
      sharePlay_ = other.sharePlay_ != null ? other.sharePlay_.Clone() : null;
      connectView_ = other.connectView_ != null ? other.connectView_.Clone() : null;
      remotePlay_ = other.remotePlay_ != null ? other.remotePlay_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SettingsModel Clone() {
      return new SettingsModel(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Uplay.Settings.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "overlay" field.</summary>
    public const int OverlayFieldNumber = 2;
    private global::Uplay.Settings.Overlay overlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.Overlay Overlay {
      get { return overlay_; }
      set {
        overlay_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 3;
    private global::Uplay.Settings.Language language_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.Language Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    /// <summary>Field number for the "misc" field.</summary>
    public const int MiscFieldNumber = 4;
    private global::Uplay.Settings.Misc misc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.Misc Misc {
      get { return misc_; }
      set {
        misc_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::Uplay.Settings.Position position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "notifications" field.</summary>
    public const int NotificationsFieldNumber = 6;
    private global::Uplay.Settings.Notifications notifications_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.Notifications Notifications {
      get { return notifications_; }
      set {
        notifications_ = value;
      }
    }

    /// <summary>Field number for the "masters" field.</summary>
    public const int MastersFieldNumber = 7;
    private global::Uplay.Settings.Masters masters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.Masters Masters {
      get { return masters_; }
      set {
        masters_ = value;
      }
    }

    /// <summary>Field number for the "hotkeys_overlayToggle" field.</summary>
    public const int HotkeysOverlayToggleFieldNumber = 9;
    private global::Uplay.Settings.Hotkey hotkeysOverlayToggle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.Hotkey HotkeysOverlayToggle {
      get { return hotkeysOverlayToggle_; }
      set {
        hotkeysOverlayToggle_ = value;
      }
    }

    /// <summary>Field number for the "hotkeys_overlayHide" field.</summary>
    public const int HotkeysOverlayHideFieldNumber = 10;
    private global::Uplay.Settings.Hotkey hotkeysOverlayHide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.Hotkey HotkeysOverlayHide {
      get { return hotkeysOverlayHide_; }
      set {
        hotkeysOverlayHide_ = value;
      }
    }

    /// <summary>Field number for the "hotkeys_captureScreenshot" field.</summary>
    public const int HotkeysCaptureScreenshotFieldNumber = 11;
    private global::Uplay.Settings.Hotkey hotkeysCaptureScreenshot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.Hotkey HotkeysCaptureScreenshot {
      get { return hotkeysCaptureScreenshot_; }
      set {
        hotkeysCaptureScreenshot_ = value;
      }
    }

    /// <summary>Field number for the "downloads" field.</summary>
    public const int DownloadsFieldNumber = 12;
    private global::Uplay.Settings.Downloads downloads_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.Downloads Downloads {
      get { return downloads_; }
      set {
        downloads_ = value;
      }
    }

    /// <summary>Field number for the "betas" field.</summary>
    public const int BetasFieldNumber = 13;
    private global::Uplay.Settings.Betas betas_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.Betas Betas {
      get { return betas_; }
      set {
        betas_ = value;
      }
    }

    /// <summary>Field number for the "autoPatching" field.</summary>
    public const int AutoPatchingFieldNumber = 14;
    private global::Uplay.Settings.AutoPatching autoPatching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.AutoPatching AutoPatching {
      get { return autoPatching_; }
      set {
        autoPatching_ = value;
      }
    }

    /// <summary>Field number for the "spotlight" field.</summary>
    public const int SpotlightFieldNumber = 15;
    private global::Uplay.Settings.Spotlight spotlight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.Spotlight Spotlight {
      get { return spotlight_; }
      set {
        spotlight_ = value;
      }
    }

    /// <summary>Field number for the "modeless_positions" field.</summary>
    public const int ModelessPositionsFieldNumber = 16;
    private global::Uplay.Settings.ModelessPositions modelessPositions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.ModelessPositions ModelessPositions {
      get { return modelessPositions_; }
      set {
        modelessPositions_ = value;
      }
    }

    /// <summary>Field number for the "conversations" field.</summary>
    public const int ConversationsFieldNumber = 17;
    private global::Uplay.Settings.Conversations conversations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.Conversations Conversations {
      get { return conversations_; }
      set {
        conversations_ = value;
      }
    }

    /// <summary>Field number for the "epic" field.</summary>
    public const int EpicFieldNumber = 18;
    private global::Uplay.Settings.Epic epic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.Epic Epic {
      get { return epic_; }
      set {
        epic_ = value;
      }
    }

    /// <summary>Field number for the "branded_installer" field.</summary>
    public const int BrandedInstallerFieldNumber = 19;
    private global::Uplay.Settings.BrandedInstaller brandedInstaller_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.BrandedInstaller BrandedInstaller {
      get { return brandedInstaller_; }
      set {
        brandedInstaller_ = value;
      }
    }

    /// <summary>Field number for the "sharePlay" field.</summary>
    public const int SharePlayFieldNumber = 20;
    private global::Uplay.Settings.SharePlay sharePlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.SharePlay SharePlay {
      get { return sharePlay_; }
      set {
        sharePlay_ = value;
      }
    }

    /// <summary>Field number for the "connect_view" field.</summary>
    public const int ConnectViewFieldNumber = 21;
    private global::Uplay.Settings.ConnectView connectView_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.ConnectView ConnectView {
      get { return connectView_; }
      set {
        connectView_ = value;
      }
    }

    /// <summary>Field number for the "remotePlay" field.</summary>
    public const int RemotePlayFieldNumber = 22;
    private global::Uplay.Settings.RemotePlay remotePlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.Settings.RemotePlay RemotePlay {
      get { return remotePlay_; }
      set {
        remotePlay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SettingsModel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SettingsModel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Overlay, other.Overlay)) return false;
      if (!object.Equals(Language, other.Language)) return false;
      if (!object.Equals(Misc, other.Misc)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Notifications, other.Notifications)) return false;
      if (!object.Equals(Masters, other.Masters)) return false;
      if (!object.Equals(HotkeysOverlayToggle, other.HotkeysOverlayToggle)) return false;
      if (!object.Equals(HotkeysOverlayHide, other.HotkeysOverlayHide)) return false;
      if (!object.Equals(HotkeysCaptureScreenshot, other.HotkeysCaptureScreenshot)) return false;
      if (!object.Equals(Downloads, other.Downloads)) return false;
      if (!object.Equals(Betas, other.Betas)) return false;
      if (!object.Equals(AutoPatching, other.AutoPatching)) return false;
      if (!object.Equals(Spotlight, other.Spotlight)) return false;
      if (!object.Equals(ModelessPositions, other.ModelessPositions)) return false;
      if (!object.Equals(Conversations, other.Conversations)) return false;
      if (!object.Equals(Epic, other.Epic)) return false;
      if (!object.Equals(BrandedInstaller, other.BrandedInstaller)) return false;
      if (!object.Equals(SharePlay, other.SharePlay)) return false;
      if (!object.Equals(ConnectView, other.ConnectView)) return false;
      if (!object.Equals(RemotePlay, other.RemotePlay)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (overlay_ != null) hash ^= Overlay.GetHashCode();
      if (language_ != null) hash ^= Language.GetHashCode();
      if (misc_ != null) hash ^= Misc.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (notifications_ != null) hash ^= Notifications.GetHashCode();
      if (masters_ != null) hash ^= Masters.GetHashCode();
      if (hotkeysOverlayToggle_ != null) hash ^= HotkeysOverlayToggle.GetHashCode();
      if (hotkeysOverlayHide_ != null) hash ^= HotkeysOverlayHide.GetHashCode();
      if (hotkeysCaptureScreenshot_ != null) hash ^= HotkeysCaptureScreenshot.GetHashCode();
      if (downloads_ != null) hash ^= Downloads.GetHashCode();
      if (betas_ != null) hash ^= Betas.GetHashCode();
      if (autoPatching_ != null) hash ^= AutoPatching.GetHashCode();
      if (spotlight_ != null) hash ^= Spotlight.GetHashCode();
      if (modelessPositions_ != null) hash ^= ModelessPositions.GetHashCode();
      if (conversations_ != null) hash ^= Conversations.GetHashCode();
      if (epic_ != null) hash ^= Epic.GetHashCode();
      if (brandedInstaller_ != null) hash ^= BrandedInstaller.GetHashCode();
      if (sharePlay_ != null) hash ^= SharePlay.GetHashCode();
      if (connectView_ != null) hash ^= ConnectView.GetHashCode();
      if (remotePlay_ != null) hash ^= RemotePlay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (overlay_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Overlay);
      }
      if (language_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Language);
      }
      if (misc_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Misc);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (notifications_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Notifications);
      }
      if (masters_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Masters);
      }
      if (hotkeysOverlayToggle_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(HotkeysOverlayToggle);
      }
      if (hotkeysOverlayHide_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(HotkeysOverlayHide);
      }
      if (hotkeysCaptureScreenshot_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(HotkeysCaptureScreenshot);
      }
      if (downloads_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Downloads);
      }
      if (betas_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Betas);
      }
      if (autoPatching_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(AutoPatching);
      }
      if (spotlight_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Spotlight);
      }
      if (modelessPositions_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ModelessPositions);
      }
      if (conversations_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Conversations);
      }
      if (epic_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Epic);
      }
      if (brandedInstaller_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(BrandedInstaller);
      }
      if (sharePlay_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SharePlay);
      }
      if (connectView_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ConnectView);
      }
      if (remotePlay_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(RemotePlay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (overlay_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Overlay);
      }
      if (language_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Language);
      }
      if (misc_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Misc);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (notifications_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Notifications);
      }
      if (masters_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Masters);
      }
      if (hotkeysOverlayToggle_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(HotkeysOverlayToggle);
      }
      if (hotkeysOverlayHide_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(HotkeysOverlayHide);
      }
      if (hotkeysCaptureScreenshot_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(HotkeysCaptureScreenshot);
      }
      if (downloads_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Downloads);
      }
      if (betas_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Betas);
      }
      if (autoPatching_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(AutoPatching);
      }
      if (spotlight_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Spotlight);
      }
      if (modelessPositions_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ModelessPositions);
      }
      if (conversations_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Conversations);
      }
      if (epic_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Epic);
      }
      if (brandedInstaller_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(BrandedInstaller);
      }
      if (sharePlay_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SharePlay);
      }
      if (connectView_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ConnectView);
      }
      if (remotePlay_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(RemotePlay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (overlay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Overlay);
      }
      if (language_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Language);
      }
      if (misc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Misc);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (notifications_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Notifications);
      }
      if (masters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Masters);
      }
      if (hotkeysOverlayToggle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HotkeysOverlayToggle);
      }
      if (hotkeysOverlayHide_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HotkeysOverlayHide);
      }
      if (hotkeysCaptureScreenshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HotkeysCaptureScreenshot);
      }
      if (downloads_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Downloads);
      }
      if (betas_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Betas);
      }
      if (autoPatching_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AutoPatching);
      }
      if (spotlight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spotlight);
      }
      if (modelessPositions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModelessPositions);
      }
      if (conversations_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Conversations);
      }
      if (epic_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Epic);
      }
      if (brandedInstaller_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BrandedInstaller);
      }
      if (sharePlay_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SharePlay);
      }
      if (connectView_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConnectView);
      }
      if (remotePlay_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RemotePlay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SettingsModel other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::Uplay.Settings.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.overlay_ != null) {
        if (overlay_ == null) {
          Overlay = new global::Uplay.Settings.Overlay();
        }
        Overlay.MergeFrom(other.Overlay);
      }
      if (other.language_ != null) {
        if (language_ == null) {
          Language = new global::Uplay.Settings.Language();
        }
        Language.MergeFrom(other.Language);
      }
      if (other.misc_ != null) {
        if (misc_ == null) {
          Misc = new global::Uplay.Settings.Misc();
        }
        Misc.MergeFrom(other.Misc);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Uplay.Settings.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.notifications_ != null) {
        if (notifications_ == null) {
          Notifications = new global::Uplay.Settings.Notifications();
        }
        Notifications.MergeFrom(other.Notifications);
      }
      if (other.masters_ != null) {
        if (masters_ == null) {
          Masters = new global::Uplay.Settings.Masters();
        }
        Masters.MergeFrom(other.Masters);
      }
      if (other.hotkeysOverlayToggle_ != null) {
        if (hotkeysOverlayToggle_ == null) {
          HotkeysOverlayToggle = new global::Uplay.Settings.Hotkey();
        }
        HotkeysOverlayToggle.MergeFrom(other.HotkeysOverlayToggle);
      }
      if (other.hotkeysOverlayHide_ != null) {
        if (hotkeysOverlayHide_ == null) {
          HotkeysOverlayHide = new global::Uplay.Settings.Hotkey();
        }
        HotkeysOverlayHide.MergeFrom(other.HotkeysOverlayHide);
      }
      if (other.hotkeysCaptureScreenshot_ != null) {
        if (hotkeysCaptureScreenshot_ == null) {
          HotkeysCaptureScreenshot = new global::Uplay.Settings.Hotkey();
        }
        HotkeysCaptureScreenshot.MergeFrom(other.HotkeysCaptureScreenshot);
      }
      if (other.downloads_ != null) {
        if (downloads_ == null) {
          Downloads = new global::Uplay.Settings.Downloads();
        }
        Downloads.MergeFrom(other.Downloads);
      }
      if (other.betas_ != null) {
        if (betas_ == null) {
          Betas = new global::Uplay.Settings.Betas();
        }
        Betas.MergeFrom(other.Betas);
      }
      if (other.autoPatching_ != null) {
        if (autoPatching_ == null) {
          AutoPatching = new global::Uplay.Settings.AutoPatching();
        }
        AutoPatching.MergeFrom(other.AutoPatching);
      }
      if (other.spotlight_ != null) {
        if (spotlight_ == null) {
          Spotlight = new global::Uplay.Settings.Spotlight();
        }
        Spotlight.MergeFrom(other.Spotlight);
      }
      if (other.modelessPositions_ != null) {
        if (modelessPositions_ == null) {
          ModelessPositions = new global::Uplay.Settings.ModelessPositions();
        }
        ModelessPositions.MergeFrom(other.ModelessPositions);
      }
      if (other.conversations_ != null) {
        if (conversations_ == null) {
          Conversations = new global::Uplay.Settings.Conversations();
        }
        Conversations.MergeFrom(other.Conversations);
      }
      if (other.epic_ != null) {
        if (epic_ == null) {
          Epic = new global::Uplay.Settings.Epic();
        }
        Epic.MergeFrom(other.Epic);
      }
      if (other.brandedInstaller_ != null) {
        if (brandedInstaller_ == null) {
          BrandedInstaller = new global::Uplay.Settings.BrandedInstaller();
        }
        BrandedInstaller.MergeFrom(other.BrandedInstaller);
      }
      if (other.sharePlay_ != null) {
        if (sharePlay_ == null) {
          SharePlay = new global::Uplay.Settings.SharePlay();
        }
        SharePlay.MergeFrom(other.SharePlay);
      }
      if (other.connectView_ != null) {
        if (connectView_ == null) {
          ConnectView = new global::Uplay.Settings.ConnectView();
        }
        ConnectView.MergeFrom(other.ConnectView);
      }
      if (other.remotePlay_ != null) {
        if (remotePlay_ == null) {
          RemotePlay = new global::Uplay.Settings.RemotePlay();
        }
        RemotePlay.MergeFrom(other.RemotePlay);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::Uplay.Settings.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            if (overlay_ == null) {
              Overlay = new global::Uplay.Settings.Overlay();
            }
            input.ReadMessage(Overlay);
            break;
          }
          case 26: {
            if (language_ == null) {
              Language = new global::Uplay.Settings.Language();
            }
            input.ReadMessage(Language);
            break;
          }
          case 34: {
            if (misc_ == null) {
              Misc = new global::Uplay.Settings.Misc();
            }
            input.ReadMessage(Misc);
            break;
          }
          case 42: {
            if (position_ == null) {
              Position = new global::Uplay.Settings.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 50: {
            if (notifications_ == null) {
              Notifications = new global::Uplay.Settings.Notifications();
            }
            input.ReadMessage(Notifications);
            break;
          }
          case 58: {
            if (masters_ == null) {
              Masters = new global::Uplay.Settings.Masters();
            }
            input.ReadMessage(Masters);
            break;
          }
          case 74: {
            if (hotkeysOverlayToggle_ == null) {
              HotkeysOverlayToggle = new global::Uplay.Settings.Hotkey();
            }
            input.ReadMessage(HotkeysOverlayToggle);
            break;
          }
          case 82: {
            if (hotkeysOverlayHide_ == null) {
              HotkeysOverlayHide = new global::Uplay.Settings.Hotkey();
            }
            input.ReadMessage(HotkeysOverlayHide);
            break;
          }
          case 90: {
            if (hotkeysCaptureScreenshot_ == null) {
              HotkeysCaptureScreenshot = new global::Uplay.Settings.Hotkey();
            }
            input.ReadMessage(HotkeysCaptureScreenshot);
            break;
          }
          case 98: {
            if (downloads_ == null) {
              Downloads = new global::Uplay.Settings.Downloads();
            }
            input.ReadMessage(Downloads);
            break;
          }
          case 106: {
            if (betas_ == null) {
              Betas = new global::Uplay.Settings.Betas();
            }
            input.ReadMessage(Betas);
            break;
          }
          case 114: {
            if (autoPatching_ == null) {
              AutoPatching = new global::Uplay.Settings.AutoPatching();
            }
            input.ReadMessage(AutoPatching);
            break;
          }
          case 122: {
            if (spotlight_ == null) {
              Spotlight = new global::Uplay.Settings.Spotlight();
            }
            input.ReadMessage(Spotlight);
            break;
          }
          case 130: {
            if (modelessPositions_ == null) {
              ModelessPositions = new global::Uplay.Settings.ModelessPositions();
            }
            input.ReadMessage(ModelessPositions);
            break;
          }
          case 138: {
            if (conversations_ == null) {
              Conversations = new global::Uplay.Settings.Conversations();
            }
            input.ReadMessage(Conversations);
            break;
          }
          case 146: {
            if (epic_ == null) {
              Epic = new global::Uplay.Settings.Epic();
            }
            input.ReadMessage(Epic);
            break;
          }
          case 154: {
            if (brandedInstaller_ == null) {
              BrandedInstaller = new global::Uplay.Settings.BrandedInstaller();
            }
            input.ReadMessage(BrandedInstaller);
            break;
          }
          case 162: {
            if (sharePlay_ == null) {
              SharePlay = new global::Uplay.Settings.SharePlay();
            }
            input.ReadMessage(SharePlay);
            break;
          }
          case 170: {
            if (connectView_ == null) {
              ConnectView = new global::Uplay.Settings.ConnectView();
            }
            input.ReadMessage(ConnectView);
            break;
          }
          case 178: {
            if (remotePlay_ == null) {
              RemotePlay = new global::Uplay.Settings.RemotePlay();
            }
            input.ReadMessage(RemotePlay);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::Uplay.Settings.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            if (overlay_ == null) {
              Overlay = new global::Uplay.Settings.Overlay();
            }
            input.ReadMessage(Overlay);
            break;
          }
          case 26: {
            if (language_ == null) {
              Language = new global::Uplay.Settings.Language();
            }
            input.ReadMessage(Language);
            break;
          }
          case 34: {
            if (misc_ == null) {
              Misc = new global::Uplay.Settings.Misc();
            }
            input.ReadMessage(Misc);
            break;
          }
          case 42: {
            if (position_ == null) {
              Position = new global::Uplay.Settings.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 50: {
            if (notifications_ == null) {
              Notifications = new global::Uplay.Settings.Notifications();
            }
            input.ReadMessage(Notifications);
            break;
          }
          case 58: {
            if (masters_ == null) {
              Masters = new global::Uplay.Settings.Masters();
            }
            input.ReadMessage(Masters);
            break;
          }
          case 74: {
            if (hotkeysOverlayToggle_ == null) {
              HotkeysOverlayToggle = new global::Uplay.Settings.Hotkey();
            }
            input.ReadMessage(HotkeysOverlayToggle);
            break;
          }
          case 82: {
            if (hotkeysOverlayHide_ == null) {
              HotkeysOverlayHide = new global::Uplay.Settings.Hotkey();
            }
            input.ReadMessage(HotkeysOverlayHide);
            break;
          }
          case 90: {
            if (hotkeysCaptureScreenshot_ == null) {
              HotkeysCaptureScreenshot = new global::Uplay.Settings.Hotkey();
            }
            input.ReadMessage(HotkeysCaptureScreenshot);
            break;
          }
          case 98: {
            if (downloads_ == null) {
              Downloads = new global::Uplay.Settings.Downloads();
            }
            input.ReadMessage(Downloads);
            break;
          }
          case 106: {
            if (betas_ == null) {
              Betas = new global::Uplay.Settings.Betas();
            }
            input.ReadMessage(Betas);
            break;
          }
          case 114: {
            if (autoPatching_ == null) {
              AutoPatching = new global::Uplay.Settings.AutoPatching();
            }
            input.ReadMessage(AutoPatching);
            break;
          }
          case 122: {
            if (spotlight_ == null) {
              Spotlight = new global::Uplay.Settings.Spotlight();
            }
            input.ReadMessage(Spotlight);
            break;
          }
          case 130: {
            if (modelessPositions_ == null) {
              ModelessPositions = new global::Uplay.Settings.ModelessPositions();
            }
            input.ReadMessage(ModelessPositions);
            break;
          }
          case 138: {
            if (conversations_ == null) {
              Conversations = new global::Uplay.Settings.Conversations();
            }
            input.ReadMessage(Conversations);
            break;
          }
          case 146: {
            if (epic_ == null) {
              Epic = new global::Uplay.Settings.Epic();
            }
            input.ReadMessage(Epic);
            break;
          }
          case 154: {
            if (brandedInstaller_ == null) {
              BrandedInstaller = new global::Uplay.Settings.BrandedInstaller();
            }
            input.ReadMessage(BrandedInstaller);
            break;
          }
          case 162: {
            if (sharePlay_ == null) {
              SharePlay = new global::Uplay.Settings.SharePlay();
            }
            input.ReadMessage(SharePlay);
            break;
          }
          case 170: {
            if (connectView_ == null) {
              ConnectView = new global::Uplay.Settings.ConnectView();
            }
            input.ReadMessage(ConnectView);
            break;
          }
          case 178: {
            if (remotePlay_ == null) {
              RemotePlay = new global::Uplay.Settings.RemotePlay();
            }
            input.ReadMessage(RemotePlay);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
